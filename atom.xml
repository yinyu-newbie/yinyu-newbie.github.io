<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yinyu-newbie.github.io</id>
    <title>Yu Yin&apos;s Blog</title>
    <updated>2019-06-28T11:47:22.494Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yinyu-newbie.github.io"/>
    <link rel="self" href="https://yinyu-newbie.github.io/atom.xml"/>
    <subtitle>行到水穷处，坐看云起时。</subtitle>
    <logo>https://yinyu-newbie.github.io/images/avatar.png</logo>
    <icon>https://yinyu-newbie.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, Yu Yin&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[Grokking Deep Learning - 前向传播]]></title>
        <id>https://yinyu-newbie.github.io/post/forward_propagation</id>
        <link href="https://yinyu-newbie.github.io/post/forward_propagation">
        </link>
        <updated>2019-06-28T08:46:32.000Z</updated>
        <content type="html"><![CDATA[<p>神经网络的前向传播过程，即在权重的基础上给定输入，得到对应的输出。输入即可以观察到的<strong>信息</strong>，权重即<strong>知识</strong>，输出即最终的预测结果。以足球比赛为例，输入<strong>控球率</strong>，乘以权重，得到<strong>赢球概率</strong>。</p>
<h3 id="单输入单输出的前向传播">单输入单输出的前向传播</h3>
<p>最简单的前向传播神经网络，即输入单个观察值，预测得到单个输出结果。
<img src="https://yinyu-newbie.github.io/post-images/1561720151730.png" alt=""></p>
<pre><code class="language-python">weight = 0.1

def neural_network(input, weight):
    prediction = input * weight
    return prediction

number_of_toes = [8.5, 9.5, 10, 9]
input = number_of_toes[0]
pred = neural_network(input, weight)
print(pred)
</code></pre>
<pre><code class="language-shell">&gt;&gt;&gt; 0.8500000000000001
</code></pre>
<h3 id="多输入单输出的前向传播">多输入单输出的前向传播</h3>
<p>单个输入值情况下，考虑不够全面，纳入更多不同的输入值，最终的输出结果综合考虑了更多因素影响。
<img src="https://yinyu-newbie.github.io/post-images/1561720303209.png" alt=""></p>
<pre><code class="language-python">weights = [0.1, 0.2, 0]

def neural_network(input, weights):
    pred = w_sum(input, weights)
    return pred

def w_sum(a, b):
    assert(len(a) == len(b))
    
    output = 0
    for i in range(len(a)):
        output += (a[i] * b[i])
        
    return output

toes = [8.5, 9.5, 9.9, 9.0]
wlrec = [0.65, 0.8, 0.8, 0.9]
nfans = [1.2, 1.3, 0.5, 1.0]

input = [toes[0], wlrec[0], nfans[0]]

pred = neural_network(input, weights)
print(pred)
</code></pre>
<pre><code class="language-shell">&gt;&gt;&gt; 0.9800000000000001
</code></pre>
<h4 id="numpy实现">Numpy实现</h4>
<p>使用Numpy，可以方便地完成各类矩阵、向量操作。这里可以直接完成向量内积计算。</p>
<pre><code class="language-python">import numpy as np

weights = np.array([0.1, 0.2, 0])

def neural_network(input, weights):
    pred = input.dot(weights)
    return pred

toes = np.array([8.5, 9.5, 9.9, 9.0])
wlrec = np.array([0.65, 0.8, 0.8])
nfans = np.array([1.2, 1.3, 0.5, 1.0])

input = np.array([toes[0], wlrec[0], nfans[0]])
pred = neural_network(input, weights)
print(pred)
</code></pre>
<pre><code class="language-shell">&gt;&gt;&gt; 0.9800000000000001
</code></pre>
<h3 id="单输入多输出的前向传播">单输入多输出的前向传播</h3>
<p>单个输入值可以影响多个不同的输出，对应单输入多输出情况。
<img src="https://yinyu-newbie.github.io/post-images/1561721091245.png" alt=""></p>
<pre><code class="language-python">weights = [0.3, 0.2, 0.9]

def neural_network(input, weights):
    pred = ele_mul(input, weights)
    return pred

def ele_mul(number, vector):
    output = [0, 0, 0]
    assert(len(output) == len(vector))
    
    for i in range(len(vector)):
        output[i] = number * vector[i]
        
    return output

wlrec = [0.65, 0.8, 0.8, 0.9]
input = wlrec[0]
pred = neural_network(input, weights)
print(pred)
</code></pre>
<pre><code class="language-shell">&gt;&gt;&gt; [0.195, 0.13, 0.5850000000000001]
</code></pre>
<h3 id="多输入多输出的前向传播">多输入多输出的前向传播</h3>
<p><img src="https://yinyu-newbie.github.io/post-images/1561721209372.png" alt=""></p>
<pre><code class="language-python">weights = [[0.1, 0.1, -0.3],
           [0.1, 0.2, 0.0],
           [0.0, 1.3, 0.1]]

def neural_network(input, weights):
    pred = vect_mat_mul(input, weights)
    
    return pred

def w_sum(a, b):
    assert(len(a) == len(b))
    
    output = 0
    for i in range(len(a)):
        output += (a[i] * b[i])
    return output

def vect_mat_mul(vect, matrix):
    assert(len(vect) == len(matrix))
 
    output = [0, 0, 0]
    
    for i in range(len(vect)):
        output[i] = w_sum(vect, matrix[i])
        
    return output


toes = [8.5, 9.5, 9.9, 9.0]
wlrec = [0.65, 0.8, 0.8, 0.9]
nfans = [1.2, 1.3, 0.5, 1.0]

input = [toes[0], wlrec[0], nfans[0]]

pred = neural_network(input, weights)
print(pred)
</code></pre>
<pre><code class="language-shell">&gt;&gt;&gt; [0.555, 0.9800000000000001, 0.9650000000000001]
</code></pre>
<p>神经网络就像积木一样，通过堆叠不同的层可以构建更加复杂的神经网络。</p>
<h3 id="基于预测再进行预测">基于预测再进行预测</h3>
<p>在前面多输入多输出的情况下，再接一个一个多输入多输出的网络层，构建一个多层神经网络。
<img src="https://yinyu-newbie.github.io/post-images/1561721619049.png" alt=""></p>
<pre><code class="language-python">ih_wgt = [[0.1, 0.2, -0.1],
          [-0.1, 0.1, 0.9],
          [0.1, 0.4, 0.1]]

hp_wgt = [[0.3, 1.1, -0.3],
          [0.1, 0.2, 0.0],
          [0.0, 1.3, 0.1]]

weights = [ih_wgt, hp_wgt]

def neural_network(input, weights):
    hid = vect_mat_mul(input, weights[0])
    pred = vect_mat_mul(hid, weights[1])
    return pred

toes = [8.5, 9.5, 9.9, 9.0]
wlrec = [0.65, 0.8, 0.8, 0.9]
nfans = [1.2, 1.3, 0.5, 1.0]

input = [toes[0], wlrec[0], nfans[0]]
pred = neural_network(input, weights)
print(pred)
</code></pre>
<pre><code class="language-shell">&gt;&gt;&gt; [0.21350000000000002, 0.14500000000000002, 0.5065]
</code></pre>
<h4 id="numpy-版本">Numpy 版本</h4>
<pre><code class="language-python">import numpy as np

ih_wgt = np.array([[0.1, 0.2, -0.1],
                   [-0.1, 0.1, 0.9],
                   [0.1, 0.4, 0.1]]).T

hp_wgt = np.array([[0.3, 1.1, -0.3],
                   [0.1, 0.2, 0.0],
                   [0.0, 1.3, 0.1]]).T

weights = [ih_wgt, hp_wgt]

def neural_network(input, weights):
    hid = input.dot(weights[0])
    pred = hid.dot(weights[1])
    return pred

toes = np.array([8.5, 9.5, 9.9, 9.0])
wlrec = np.array([0.65, 0.8, 0.8, 0.9])
nfans = np.array([1.2, 1.3, 0.5, 1.0])

input = np.array([toes[0], wlrec[0], nfans[0]])

pred = neural_network(input, weights)
pred
</code></pre>
<pre><code class="language-shell">&gt;&gt;&gt; array([0.2135, 0.145 , 0.5065])
</code></pre>
<h3 id="总结">总结</h3>
<p>前向传播只能通过输入值得到计算后的输出值，但目前存在二个问题:</p>
<ul>
<li>不知道输出结果好坏与否</li>
<li>如果输出结果不理想，如何调整权重
上述问题的解决方法将会在后续提到。</li>
</ul>
]]></content>
    </entry>
</feed>